

import {  createSlice } from '@reduxjs/toolkit';


export const userSlice = createSlice({
  name: 'user',
  initialState:{
  user:null,
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    login:(state,action)=>{
      // login takes state and action and does the following
      state.user=action.payload;
// by this we will later dispatch the action this will manipulate the user section of the store
// so state will take the user and update it to ever the value thatt is passed by us as a payload in this state

    },
    logout:(state)=>{
      state.user=null;
    }
    },
  
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
});

export const { login, logout } = userSlice.actions;
// this export will give us the access to these actions outside of the class

//SELECTERS WILL TELL US HOW WE ARE ACCESSING THESE VALUES FROM THE GLOBAL OR USER STORE

// AS WE ARE PUHING DATA IN STORE WITH THE HELP OF THE ACTION S BUT WE CAN GET THAT DATA USING THE SELECTERS





// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = state => state.user.user;
// when state change so go inside the userslice and get the user
// WE CAN GET VALUES OUT OF THE STORE USING THE SELECTERS
// THAT WILL GO INSIDE THE STATE AND THEN IN THE USERSLICE AND THEN GET THE USER FROM THE STORE



export default userSlice.reducer;
